name: Build and Release

on:
  workflow_dispatch:
    branches:
      - master
    inputs:
      ReleaseType:
        type: choice
        description: 'Type of Release'
        required: true
        options:
          - MAJOR
          - MINOR
          - PATCH
          - BETA

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install git-semver utility
        run: npm install -g git-semver

      - name: Install semver
        run: npm install -g semver

      # - name: Fetch the latest tag
      #   id: fetch-latest-tag
      #   run: |
      #     latestTag=$(git tag -l | sort -V | tail -n 1)
      #     echo "Latest tag: $latestTag"
      #     echo "::set-output name=latestTag::$latestTag"

      # - name: Fetch the latest tag
      #   run: |
      #     git fetch --tags
      #     latestTag=$(git tag -l | sort -V | tail -n 1)
      #     echo "Latest tag: $latestTag" >> $GITHUB_ENV

      # - name: Set output for later steps
      #   run: echo "::set-output name=latestTag::$latestTag"

      - name: Fetch the latest tag
        id: fetch-tag
        run: |
          git fetch --tags
          latestTag=$(git tag -l | sort -V | tail -n 1)
          echo "Latest tag: $latestTag"
          echo "LATEST_TAG=$latestTag" >> $GITHUB_ENV

      - name: Determine new version
        id: determine-version
        run: |
          echo "LATEST_TAG=${{ steps.fetch-tag.outputs.LATEST_TAG }}" >> $GITHUB_ENV
          currentVersion=${{ env.LATEST_TAG }}
          releaseType=${{ github.event.inputs.ReleaseType }}
          
          case $releaseType in
            MAJOR)
              newVersion=$(semver --increment major $currentVersion)
              ;;
            MINOR)
              newVersion=$(semver --increment minor $currentVersion)
              ;;
            PATCH)
              newVersion=$(semver --increment patch $currentVersion)
              ;;
            BETA)
              if [[ $currentVersion =~ -beta\.([0-9]+)$ ]]; then
                betaCount=$((BASH_REMATCH[1]+1))
              else
                betaCount=1
              fi
              newVersion="${currentVersion}-beta.${betaCount}"
              ;;
            *)
              echo "Invalid ReleaseType provided."
              exit 1
              ;;
          esac

          echo "New version: $newVersion"
          echo "NEW_VERSION=$newVersion" >> $GITHUB_ENV




      # - name: Determine new version
      #   id: determine-version
      #   run: |
      #     currentVersion=${{ steps.fetch-tag.outputs.LATEST_TAG }}
      #     echo "Latest tag: $currentVersion"
      #     newVersion=$(git semver --increment ${{ github.event_name }} --from $currentVersion)
      #     echo "New version: $newVersion"
      #     echo "::set-output name=newVersion::$newVersion"

      # - name: Determine new version
      #   id: determine-version
      #   run: |
      #     currentVersion=${{ env.LATEST_TAG }}
      #     newVersion=$(semver --increment ${{ github.event_name }} --from $currentVersion)
      #     echo "New version: $newVersion"
      #     echo "NEW_VERSION=$newVersion" >> $GITHUB_ENV

      - name: Set version as an environment variable
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "RELEASE_VERSION=v${{ steps.determine-version.outputs.newVersion }}" >> $GITHUB_ENV

          git tag $RELEASE_VERSION
          git push origin $RELEASE_VERSION
          releaseNotes="Release $RELEASE_VERSION"

          # Check if the release already exists
          if ! gh release view $RELEASE_VERSION >/dev/null 2>&1; then
            gh release create $RELEASE_VERSION -t "$RELEASE_VERSION" -n "$releaseNotes"
          fi



      # - name: Tag and push
      #   run: |
      #     git tag $RELEASE_VERSION
      #     git push origin $RELEASE_VERSION