name: Build and Release

on:
  workflow_dispatch:
    branches:
      - master
    inputs:
      ReleaseType:
        type: choice
        description: 'Type of Release'
        required: true
        options:
          - MAJOR
          - MINOR
          - PATCH
          - BETA
      Environment:
        type: choice
        description: 'The environment to deploy to'
        required: true
        options:
        - test
        - prod
      Release:
        description: 'Production release name'
        required: false
        default: 'latest'

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        if: ${{ github.event.inputs.Environment == 'test' }}
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install semver
        if: ${{ github.event.inputs.Environment == 'test' }}
        run: npm install -g semver

      - name: Fetch the latest tag
        id: fetch-tag
        run: |
          git fetch --tags
          latestTag=$(git tag -l | sort -V | tail -n 1)
          echo "Latest tag: $latestTag"
          echo "LATEST_TAG=$latestTag" >> $GITHUB_ENV

      - name: Determine new version
        if: ${{ github.event.inputs.Environment == 'test' }}
        id: determine-version
        run: |
          currentVersion=${{ env.LATEST_TAG }}
          releaseType=${{ github.event.inputs.ReleaseType }}
          
          case $releaseType in
            MAJOR)
              newVersion=$(semver --increment major $currentVersion)
              ;;
            MINOR)
              newVersion=$(semver --increment minor $currentVersion)
              ;;
            PATCH)
              newVersion=$(semver --increment patch $currentVersion)
              ;;
            BETA)
              if [[ $currentVersion =~ -beta\.([0-9]+)$ ]]; then
                betaCount=$((BASH_REMATCH[1]+1))
              else
                betaCount=1
              fi
              newVersion="${currentVersion}-beta.${betaCount}"
              ;;
            *)
              echo "Invalid ReleaseType provided."
              exit 1
              ;;
          esac

          echo "New version: $newVersion"
          echo "NEW_VERSION=$newVersion" >> $GITHUB_ENV

      - name: Create Tag and Release
        if: ${{ github.event.inputs.Environment == 'test' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |          
          git tag $NEW_VERSION
          git push origin $NEW_VERSION
          releaseNotes="Release $newVersion"

          # Check if the release already exists
          if ! gh release view $NEW_VERSION >/dev/null 2>&1; then
            gh release create $NEW_VERSION -t "$NEW_VERSION" -n "$releaseNotes"
          fi

      - name: Determine release to deploy in Production
        id: determine-release
        run: |
          selectedRelease=${{ github.event.inputs.Release }}
          allReleases=${{ env.LATEST_TAG }}
          
          if [ "$selectedRelease" == "latest" ]; then
            selectedRelease=$(echo "$allReleases")
          fi

          echo "Selected release: $selectedRelease"
          echo "SELECTED_RELEASE=$selectedRelease" >> $GITHUB_ENV
          echo "::set-output name=SELECTED_RELEASE::$selectedRelease" 

  deploy:
    runs-on: github-self-hosted
    needs: build-and-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploying the release to Production
        if: ${{ github.event.inputs.Environment == 'prod' }}
        env:
          SELECTED_RELEASE: ${{ needs.build-and-release.outputs.SELECTED_RELEASE }}
        run: |            
          # Add deployment logic based on the selected release
          echo "Deploying release: $SELECTED_RELEASE"
          # curl -L -o release.zip "https://github.com/${{ github.repository }}/archive/${SELECTED_RELEASE}.zip"
          # unzip -q release.zip
          # rm release.zip
          # mv "${{ github.repository }}-${release_tag}"/* .
          # rmdir "${{ github.repository }}-${release_tag}"

      # - name: Deploy Docker container
      #   run: |
      #     # Add your deployment logic here
      #     # For example, restart Docker containers or deploy to a Kubernetes cluster
      #     # Replace this with your actual deployment steps

      #     # Example: Run Docker container
      #     docker-compose -f docker-compose.yml up -d
      #     docker run -d --name my-container -p 8080:80 .