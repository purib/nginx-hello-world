name: Semantic versioning

on:
  workflow_dispatch:
    branches:
      - master
    inputs:
      Environment:
        type: choice
        description: 'The environment to deploy to'
        required: true
        options:
        - test
        - prod
      ContinueOnError:
        type: choice
        description: 'Continue on Snyk and SonarQube scan failures?'
        required: true
        options:
        - false
        - true
      ReleaseType:
        type: choice
        description: 'Type of Release'
        required: true
        options:
        - MAJOR
        - MINOR
        - PATCH
        - BETA
      Release:
        description: 'Select the release name'
        required: false
        default: 'latest'



permissions:
  id-token: write
  contents: write    # This is required for actions/checkout@v3


env:
  SERVICE: openai      
  RC: RC1

jobs:
  deploy:
    name: Deploy
    environment: ${{ github.event.inputs.Environment }}
    runs-on: ubuntu-latest   

    steps:

    - uses: actions/checkout@v3
    - name: Build the site in the jekyll/builder container
      run: |
        docker run \
        -v ${{ github.workspace }}:/srv/jekyll -v ${{ github.workspace }}/_site:/srv/jekyll/_site \
        jekyll/builder:latest /bin/bash -c "chmod -R 777 /srv/jekyll && jekyll build --future"

    - name: Deploy versions
      id: determine-version
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git fetch --tags
        latestTag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        currentVersion=${latestTag}

        echo "CURRENT_VERSION=$currentVersion" >> $GITHUB_ENV

        releaseType=${{ github.event.inputs.ReleaseType }}

        IFS='.' read -r -a versionComponents <<< "$currentVersion"
        major=${versionComponents[0]}
        minor=${versionComponents[1]}
        patch=${versionComponents[2]}
        betaCount=0

        case $releaseType in
          MAJOR)
            major=$((major+1))
            minor=0
            patch=0
            newVersion="${major}.${minor}.${patch}"
            echo "NEW_VERSION=$newVersion" >> $GITHUB_ENV
            ;;
          MINOR)
            minor=$((minor+1))
            patch=0
            newVersion="${major}.${minor}.${patch}"
            echo "NEW_VERSION=$newVersion" >> $GITHUB_ENV
            ;;
          BETA)
            if [[ $currentVersion =~ -beta\.([0-9]+)$ ]]; then
              betaCount=$((BASH_REMATCH[1]+1))
            fi
            newVersion="${major}.${minor}.${patch}-beta.${betaCount}"
            ;;
          *)
            patch=$((patch+1))
            newVersion="${major}.${minor}.${patch}"
            echo "NEW_VERSION=$newVersion" >> $GITHUB_ENV
            ;;
        esac

        echo "NEW_VERSION=$newVersion" >> $GITHUB_ENV

        git tag $newVersion
        git push origin $newVersion

        releaseNotes="Release $newVersion"

        # Check if the release already exists
        if ! gh release view $newVersion >/dev/null 2>&1; then
          gh release create $newVersion -t "$newVersion" -n "$releaseNotes"
        fi

